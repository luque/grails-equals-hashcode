We have a domain class where we implemented @equals@ and @hashCode@ methods (with Apache Commons Lang builders). @includedSampleProperty@ and @child@ are used in @equals@/@hashCode@, whereas @ignoredSampleProperty@ is not a part of object's equality.
{code}
class DomainObject {
    String includedSampleProperty
    String ignoredSampleProperty
    SecondLevelDomainObject child

    boolean equals(o) {
        if (o == null) return false
        if (this.is(o)) return true
        if (!(o instanceof DomainObject)) return false

        DomainObject that = (DomainObject) o
        new EqualsBuilder()
            .append(includedProperty, that.includedProperty)
            .append(child, that.child)
            .isEquals()
    }

    int hashCode() {
        new HashCodeBuilder()
            .append(includedProperty)
            .append(child)
            .toHashCode()
    }
}

class SecondLevelDomainObject {
    String sampleProperty

    boolean equals(o) { // ... }
    int hashCode() { // ... }
}
{code}

We should test both @equals@ and @hashCode@ methods if they:

* fulfill @equals@ and @hashCode@ contracts as specified in @[Object|api:java.lang.Object]@ Javadoc (see below)
* use some properties in @equals@/@hashCode@
* ignore some properties (i.e. if their value change, and the remaining properties stay unchanged, @equals@ and @hashCode@ should return the same value as before change)

To keep your code DRY, extend @EqualsHashCodeSpec@ (which in turn extends @UnitSpec@) and:

* override the factory method @createDomainObjectToCompare@ that spawns a new object under test
* override the method @modifiedPropertiesIncludedInEqualsAndHashCode@ that returns a map of property names used in @equals@/@hashCode@ and their values changed with respect to the object created by @createDomainObjectToCompare@
* optionally override the method @modifiedPropertiesIgnoredInEqualsAndHashCode@ for properties NOT used in @equals@/@hashCode@
* you may use closures as property values for lazy evaluation (as for @child@ property value in the example below)

Example for our sample @DomainObject@:
{code}
class ChildFactory {
    static newExtremelyComplexSecondLevelDomainObject() {
        new SecondLevelDomainObject(sampleProperty: 'a value')
    }
}

class DomainObjectSpec extends EqualsHashCodeSpec {

    def createDomainObjectToCompare() {
        new DomainObject(includedSampleProperty: 'foo', ignoredSampleProperty: 'bar',
            child: ChildFactory.newExtremelyComplexSecondLevelDomainObject())
    }

    def modifiedPropertiesIncludedInEqualsAndHashCode() {
        [includedSampleProperty: 'foo changed', , child: {
            def child = ChildFactory.newExtremelyComplexSecondLevelDomainObject()
            child.sampleProperty = 'a different value'
            child
        }]
    }

    def modifiedPropertiesIgnoredInEqualsAndHashCode() {
        [ignoredSampleProperty: 'bar changed']
    }
}
{code}
